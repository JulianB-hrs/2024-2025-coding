# Energy functions
def spring_energy(d):
    return 0.5 * k * d**2

def interaction_energy(d):
    if d < R:
        return C_int * np.cos((np.pi / 2) * (d / R))
    else:
        return 0

def surface_energy(z):
    if z < 0:
        return z
    else:
        return 0

def total_energy(chains):
    E = 0
    for chain in chains:
        for i in range(num_monomers):
            # Surface energy
            E += surface_energy(chain[i, 2])
            # Spring energy
            if i == 0:
                d = np.linalg.norm(chain[i] - np.array([chain[i, 0], chain[i, 1], 0]))
            else:
                d = np.linalg.norm(chain[i] - chain[i-1])
            E += spring_energy(d)
            if i < num_monomers - 1:
                d = np.linalg.norm(chain[i] - chain[i+1])
                E += spring_energy(d)
            # Interaction energy
            for other_chain in chains:
                for j in range(num_monomers):
                    if not (chain is other_chain and i == j):
                        d = np.linalg.norm(chain[i] - other_chain[j])
                        E += interaction_energy(d)
    return E

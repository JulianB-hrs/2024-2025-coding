import numpy as np
from numpy import random as rnd

def systemBase(L=1, n=50):
    # Initialize arrays to store positions and types
    positions = np.zeros((n, 10, 3), dtype=int)  # the 50 polymers and the 10 monomers
    monomer_types = np.empty((n, 10), dtype=object)  # Types like 'A' or 'B'

    # Generate unique positions for each monomer
    used_positions = set()
    moni = 0 #monomer index

    for i in range(n):  # For each polymer
        while True:
            x = rnd.randint(0, 10 * L)
            y = rnd.randint(0, 10 * L)
            pos = (y, x)
            if pos not in used_positions:
                positions[i, 0] = [x, y, 0]  # Set y, x, z coordinates
                monomer_types[i,0] = "A"  # Example type
                used_positions.add(pos)
                break

    return positions, monomer_types

def systemBlock(base, mtype): #block polymer simulation
    for i in range(len(base)):
        x = base[i,0,0]
        y = base[i,0,1]
        z = 1
        for j in range(1,10):
            base[i,j] = [x , y , z]
            if j < 5:
                mtype[i,j] = "A"
            else:
                mtype[i,j] = "B"
            z +=1
    return base, mtype

def systemAlter(base , mtype): #alternating polymer simulation
    for i in range(len(base)):
        x = base[i,0,0]
        y = base[i,0,1]
        z = 1
        for j in range(1,10):
            base[i,j] = [x , y , z]
            if j % 2 == 0:
                mtype[i,j] = "A"
            else:
                mtype[i,j] = "B"
            z +=1
    return base, mtype

def pickrndmon(base, mtype):
    rndpol = rnd.randint(50)
    rndmon = rnd.randint(10)
    rndpos = base[rndpol,rndmon]
    rndtyp = mtype[rndpol,rndmon]
    return rndpos , rndtyp
    
    
base0 , mtype0 = systemBase()
base , mtype = systemBlock(base0, mtype0)

print(pickrndmon(base,mtype))

def move_particle(base, L=1):
    #Move a randomly selected monomer.
    rndpol = rnd.randint(50)
    rndmon = rnd.randint(10)
    
    # Generate a random axis (0 for x, 1 for y, 2 for z)
    axis = rnd.randint(3)
    
    # Generate a random displacement in the chosen axis
    displacement = rnd.uniform(-1,1)
    
    # store the initial position and the link to the new position
    old_pos = np.copy(base[rndpol, rndmon])
    new_pos = base[rndpol, rndmon]

    # Update the base array with the new position
    base[rndpol, rndmon] += displacement
    
    return base, rndpol, rndmon, old_pos, new_pos

def monte_carlo_simulation(base, n_steps=50000):
    #Perform Monte Carlo simulation and calculate energy differences.
    energy_diffs = []
    initial_energy = compute_total_energy(base)
    
    for _ in range(n_steps):
        base, rndpol, rndmon, old_pos, new_pos = move_particle(base)
        
        # Calculate new energy after moving the particle
        new_energy = compute_total_energy(base)
        
        # Calculate energy difference
        energy_diff = new_energy - initial_energy
        energy_diffs.append(energy_diff)
        
        # Revert the move to restore the original position 
        base[rndpol, rndmon] = old_pos

        #accept or reject
        T = 0.5
        k= rnd.uniform(0,1)
        if ma.exp(-energy_diff/T)<k:
            continue

        # Update initial energy for the next iteration
        initial_energy = new_energy
       


    return base, energy_diffs


positions, monomer_types = systemBase(L=1, n=50)
positions, monomer_types = systemBlock(positions, monomer_types)
positions, energy_diffs = monte_carlo_simulation(positions)
